{
  "app@preview.tsx": "export const AppExample = ({ children }: { children: React.ReactNode }) => {\n  return (\n    <KosCoreContextProvider>\n      <KosTranslationProvider appContext={[\"app/system\"]} locale=\"en\">\n        {children}\n      </KosTranslationProvider>\n    </KosCoreContextProvider>\n  );\n};",
  "ConfigPropertyBoolean@config-property-boolean.tsx": "export const ConfigPropertyBoolean: React.FunctionComponent<Props> =\n  kosComponent(({ device }: Props) => {\n    const [value, setValue] = useState(device.blockSoldOutWater.value ?? false);\n    return (\n      <LayoutContainer>\n        The config property is set to {device.blockSoldOutWater.displayValue}\n        <FormLayout>\n          <Checkbox\n            label=\"Block Sold Out Water\"\n            value={value}\n            name=\"blockSoldOutWater\"\n            onChange={(e) => setValue(e.target.checked)}\n          />\n          <Button\n            type=\"button\"\n            onClick={() => device.blockSoldOutWater.updateProperty(value)}\n          >\n            Save\n          </Button>\n        </FormLayout>\n      </LayoutContainer>\n    );\n  });",
  "ConfigPropertyEnum@config-property-enum.tsx": "export const ConfigPropertyEnum: React.FunctionComponent<Props> = kosComponent(\n  ({ device }: Props) => {\n    const [value, setValue] = useState(device.colors.value);\n\n    return (\n      <LayoutContainer>\n        The Color is set to {device.colors.displayValue}\n        <FormLayout>\n          <Select\n            onChange={(e: ChangeEvent<HTMLSelectElement>) =>\n              setValue(e.target.value as OcclusionPolicyOptions)\n            }\n          >\n            {device.colors.options?.map((option) => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </Select>\n          <Button\n            onClick={() => {\n              device.colors.updateProperty(value || \"NONE\");\n              setValue(() => device.colors.value);\n            }}\n            type=\"button\"\n          >\n            Change Color\n          </Button>\n        </FormLayout>\n      </LayoutContainer>\n    );\n  },\n);",
  "ConfigProperty@config-property.tsx": "export const ConfigProperty: React.FunctionComponent<Props> = kosComponent(\n  ({ device }: Props) => {\n    const [value, setValue] = useState(device.deviceName.value || \"\");\n\n    return (\n      <LayoutContainer>\n        The name of this device is {device.deviceName.displayValue}\n        <FormLayout>\n          <Input\n            value={value}\n            onChange={(e: ChangeEvent<HTMLInputElement>) =>\n              setValue(e.target.value)\n            }\n          />\n          <Button\n            onClick={() => device.deviceName.updateProperty(value)}\n            type=\"button\"\n          >\n            Change Name\n          </Button>\n        </FormLayout>\n      </LayoutContainer>\n    );\n  },\n);",
  "provider-hook@context-example.tsx": "export const ContextExample: React.FunctionComponent = kosComponent(() => {\n  const { model } = useCounterContext();\n  return <ContextExampleContainer>{model?.count}</ContextExampleContainer>;\n});",
  "provider@provider-example.tsx": "export const ProviderExample = () => {\n  return (\n    <CounterProvider>\n      <ContextExample />\n    </CounterProvider>\n  );\n};",
  "CountdownExample@countdown-example.tsx": "export const CountdownExample: React.FunctionComponent<Props> = kosComponent(\n  ({ counter }) => {\n    const countdown = getKosCompanionModel<CountdownModel>(\n      counter,\n      Countdown.type,\n    );\n\n    if (!countdown) return null;\n    return (\n      <LayoutContainer>\n        Time Remaining: {countdown.timeRemaining}\n        <Button type=\"button\" onClick={countdown.reset}>\n          Reset\n        </Button>\n      </LayoutContainer>\n    );\n  },\n);",
  "futures-component@futures.tsx": "export const Futures: React.FunctionComponent<Props> = kosComponent(\n  ({ futures }: Props) => {\n    return (\n      <FuturesContainer>\n        <Button\n          onClick={() => futures.start()}\n          disabled={futures.isInProgress}\n          type=\"button\"\n        >\n          {futures.isInProgress ? \"In Progress\" : \"Start\"}\n        </Button>\n        {futures.progress !== undefined ? (\n          <ProgressBar progress={futures.progress} />\n        ) : null}\n        {futures.isComplete ? <div>Complete</div> : null}\n      </FuturesContainer>\n    );\n  },\n);",
  "CounterExample@counter-example.tsx": "export const CounterExample: React.FunctionComponent = kosComponent(() => {\n  const { model } = useCounter();\n\n  const { count } = model || {};\n\n  return (\n    <Main>\n      <div>Active Count: {count}</div>\n    </Main>\n  );\n});",
  "CounterWithToggle@counter-example.tsx": "export const CounterWithToggle: React.FunctionComponent = kosComponent(() => {\n  const { model } = useCounter();\n\n  const { count, toggleCounter, isCounting } = model || {};\n\n  return (\n    <Main>\n      <div>Active Count: {count}</div>\n      <button onClick={toggleCounter} type=\"button\">\n        {isCounting ? \"Stop\" : \"Start\"}\n      </button>\n    </Main>\n  );\n});",
  "CounterWithColor@counter-example.tsx": "export const CounterWithColor: React.FunctionComponent = kosComponent(() => {\n  const { model } = useCounter();\n  const { model: colorModel } = useColor();\n\n  const { count, toggleCounter, isCounting } = model || {};\n  const { color } = colorModel || {};\n\n  return (\n    <Main color={color}>\n      <div>Active Count: {count}</div>\n      <button onClick={toggleCounter} type=\"button\">\n        {isCounting ? \"Stop\" : \"Start\"}\n      </button>\n    </Main>\n  );\n});",
  "CounterWithHOC@counter-example.tsx": "const Counter: React.FunctionComponent<{\n  counter: CounterModel;\n}> = kosComponent(({ counter }: { counter: CounterModel }) => {\n  return (\n    <Main>\n      <div>Active Count: {counter.count}</div>\n    </Main>\n  );\n});",
  "CounterHOCDeclaration@counter-example.tsx": "export const CounterWithHOC = withCounter(Counter);",
  "localization-trans@localization-trans.tsx": "export const LocalizationTrans: React.FunctionComponent = kosComponent(() => {\n  const { t } = useKosTranslation(\"kos-codex\");\n  return (\n    <LocalizationContainer>\n      <Trans\n        t={t}\n        i18nKey=\"example.link\"\n        components={{ link: <a href=\"https://kosdev.com\" /> }}\n        defaults=\"Click here to go to the <link>{{link}}</link>\"\n        values={{ link: \"KOS homepage\" }}\n      />\n    </LocalizationContainer>\n  );\n});",
  "localization-interpolate@localization-interpolate.tsx": "export const LocalizationInterpolate: React.FunctionComponent = kosComponent(\n  () => {\n    const { t } = useKosTranslation(\"kos-codex\");\n    return (\n      <LocalizationContainer>\n        {t(\"example.interpolation\", {\n          defaultValue: \"Hello {{name}}\",\n          data: { name: \"User\" },\n        })}\n      </LocalizationContainer>\n    );\n  },\n);",
  "localization@localization.tsx": "export const Localization: React.FunctionComponent = kosComponent(() => {\n  const { t } = useKosTranslation(\"kos-codex\");\n  return (\n    <LayoutContainer>\n      {t(\"example.welcome\", { defaultValue: \"Welcome to the KOS codex\" })}\n    </LayoutContainer>\n  );\n});",
  "Region@region.tsx": "export const Region: React.FunctionComponent = kosComponent(() => {\n  const { regionModel, regionSelectProps } = useKosRegions();\n\n  const { formattedDate } = useFormattedDate({\n    year: now.getFullYear(),\n    month: now.getMonth(),\n    day: now.getDate(),\n    formatString: regionModel?.selectedDateFormat || \"\",\n  });\n\n  const formattedTime = useFormattedTime(\n    now,\n    regionModel?.selectedTimeFormat || \"\",\n  );\n\n  return (\n    <RegionContainer>\n      <div>Unformatted date: {now.toString()}</div>\n      <div>\n        Formatted Date & Time: {formattedDate} - {formattedTime}\n      </div>\n      <label>Select a region:</label>\n      <Select\n        onChange={regionSelectProps.onChange}\n        value={regionSelectProps.value}\n      >\n        {regionSelectProps.options}\n      </Select>\n    </RegionContainer>\n  );\n});",
  "unit-override@unit-override.tsx": "export const UnitOverride: React.FunctionComponent<Props> = kosComponent(\n  ({ unitExample }: Props) => {\n    const [value, setValue] = useState(unitExample.volumeAsOunce.value);\n\n    return (\n      <LayoutContainer>\n        The max pour volume is {unitExample.volumeAsOunce.displayValue}, but is\n        stored as {unitExample.volumeAsOunce.rawValue} (in ml).\n        <FormLayout>\n          <Input\n            value={value}\n            onChange={(e: ChangeEvent<HTMLInputElement>) =>\n              setValue(Number(e.target.value))\n            }\n            type=\"number\"\n          />\n          <Button\n            onClick={() => {\n              unitExample.volumeAsOunce.updateProperty(Number(value));\n              setValue(() => unitExample.volumeAsOunce.value);\n            }}\n            type=\"button\"\n          >\n            Change Limit\n          </Button>\n        </FormLayout>\n      </LayoutContainer>\n    );\n  },\n);",
  "unit-config-export@unit-override.tsx": "export default withUnitExample(UnitOverride);",
  "unit-config@unit-config.tsx": "export const UnitConfig: React.FunctionComponent<Props> = kosComponent(\n  ({ unitExample }: Props) => {\n    const [value, setValue] = useState(unitExample.volume.value);\n\n    return (\n      <LayoutContainer>\n        The volume is {unitExample.volume.displayValue}, but is stored as{\" \"}\n        {unitExample.volume.rawValue} (in ml).\n        <FormLayout>\n          <Input\n            value={value}\n            onChange={(e: ChangeEvent<HTMLInputElement>) =>\n              setValue(Number(e.target.value))\n            }\n            type=\"number\"\n          />\n          <Button\n            onClick={() => {\n              unitExample.volume.updateProperty(Number(value));\n              setValue(() => unitExample.volume.value);\n            }}\n            type=\"button\"\n          >\n            Change Limit\n          </Button>\n        </FormLayout>\n      </LayoutContainer>\n    );\n  },\n);",
  "unit-config-export@unit-config.tsx": "export default withUnitExample(UnitConfig);",
  "units-demo@units.tsx": "export const Units = () => {\n  const [value, setValue] = useState(\"2000\");\n  const { regionData } = useKosRegions();\n  const targetUnit = regionData?.unitSystemId === \"si\" ? \"ml\" : \"fluid-ounce\";\n  const inLocalUnits = convert(Number(value), \"ml\", targetUnit);\n  return (\n    <UnitLayout>\n      <div>\n        {inLocalUnits} {targetUnit}\n      </div>\n      <Input\n        value={value}\n        onChange={(e: ChangeEvent<HTMLInputElement>) =>\n          setValue(e.target.value)\n        }\n      />\n    </UnitLayout>\n  );\n};",
  "TeamList@team-list.tsx": "export const TeamList: React.FunctionComponent<Props> = kosComponent(\n  (props: Props) => {\n    const [name, setName] = useState(\"\");\n\n    const { data, createTeam, removeModel } = props.teamContainer;\n\n    const handleAddTeam = () => {\n      createTeam?.(name);\n      setName(\"\");\n    };\n\n    return (\n      <div>\n        <LayoutContainer>\n          <label htmlFor=\"name\">Name</label>\n          <Input\n            type=\"text\"\n            value={name}\n            name=\"name\"\n            onChange={(e: ChangeEvent<HTMLInputElement>) =>\n              setName(e.target.value)\n            }\n          />\n          <Button onClick={handleAddTeam} type=\"button\">\n            Add Team\n          </Button>\n        </LayoutContainer>\n        <ul>\n          {data &&\n            data.map((team) => (\n              <TeamWithUser\n                key={team.id}\n                team={team}\n                removeTeam={() => removeModel?.(team.id)}\n              />\n            ))}\n        </ul>\n      </div>\n    );\n  },\n);",
  "ServiceExample@service-example.tsx": "export const ServiceExample: React.FunctionComponent = kosComponent(() => {\n  const { model } = useServiceExampleContainer();\n  return (\n    <LayoutContainer>\n      <Heading>List of Available Troubles</Heading>\n      {model?.data.map((troubles) => (\n        <div key={troubles.id}>\n          ID: {troubles.id} - {troubles.description}\n        </div>\n      ))}\n    </LayoutContainer>\n  );\n});",
  "TeamComponent@team.tsx": "export const Team: React.FunctionComponent<Props> = kosComponent(({ team }) => (\n  <Card padding=\"large\" title={team.name}>\n    <TextContainer>\n      <Heading>{team.name}</Heading>\n    </TextContainer>\n  </Card>\n));",
  "TeamWithUser@team.tsx": "export const TeamWithUser: React.FunctionComponent<Props> = kosComponent(\n  ({ team }) => {\n    const [username, setUsername] = useState(\"\");\n    const [role, setRole] = useState(\"guest\");\n\n    const { model } = useUserContainer();\n\n    const handleClick = () => {\n      if (!username) return;\n      model?.createUser({ name: username, role, teamId: team.id });\n      setUsername(\"\");\n      setRole(\"guest\");\n    };\n\n    const users = model?.getUsersByTeamId(team.id);\n\n    return (\n      <TeamCard padding=\"large\" title={team.name}>\n        <Heading as=\"h4\">{team.name}</Heading>\n        <List>\n          {users?.map((user) => <User key={user.id} user={user} />) ?? null}\n        </List>\n        <InputLayout>\n          <Input\n            value={username}\n            onChange={(e: ChangeEvent<HTMLInputElement>) =>\n              setUsername(e.target.value)\n            }\n          />\n          <Select onChange={(e) => setRole(e.target.value)}>\n            {[\n              { id: \"admin\", label: \"Admin\" },\n              { id: \"superadmin\", label: \"Superadmin\" },\n              { id: \"guest\", label: \"guest\" },\n              { id: \"user\", label: \"default\" },\n            ].map(({ id, label }) => {\n              return <option key={id} selected={id === role} label={label} />;\n            })}\n          </Select>\n          <Button type=\"button\" onClick={handleClick}>\n            Create\n          </Button>\n        </InputLayout>\n      </TeamCard>\n    );\n  },\n);",
  "timer-with-warning@timer-with-warning.tsx": "export const TimerWithWarning: React.FunctionComponent<Props> = kosComponent(\n  ({ session }) => {\n    const { createTimerWithWarning, reset } = session;\n\n    return (\n      <TimerContainer>\n        {session.message ? (\n          session.message\n        ) : (\n          <Button onClick={() => createTimerWithWarning()} type=\"button\">\n            Start\n          </Button>\n        )}\n        <ButtonContainer>\n          <Button onClick={() => reset()}>Reset</Button>\n        </ButtonContainer>\n      </TimerContainer>\n    );\n  },\n);",
  "timer-export@timer-with-warning.tsx": "export default withSession(TimerWithWarning);",
  "timer@timer.tsx": "export const Timer: React.FunctionComponent<Props> = kosComponent(\n  ({ session }) => {\n    const { timerStatus, pause, start, reset } = session;\n\n    return (\n      <TimerContainer>\n        Timer is {timerStatus}\n        <ButtonContainer>\n          <Button disabled={timerStatus !== \"active\"} onClick={() => pause()}>\n            Pause\n          </Button>\n          <Button disabled={timerStatus === \"active\"} onClick={() => start()}>\n            Start\n          </Button>\n          <Button onClick={() => reset()}>Reset</Button>\n        </ButtonContainer>\n      </TimerContainer>\n    );\n  },\n);",
  "timer-export@timer.tsx": "export default withSession(Timer);",
  "color-model@color-model.ts": "@kosModel(MODEL_TYPE)\nexport class ColorModelImpl implements IKosDataModel, IKosIdentifiable {\n  id: string;\n\n  @kosDependency<CounterModel>({ modelType: Counter.type })\n  counterModel!: CounterModel;\n\n  private colorArray: string[] = [\"#048FEC\", \"#9747FF\", \"#01528A\", \"#B4DEFA\"];\n\n  constructor(modelId: string) {\n    this.id = modelId;\n  }\n\n  get color(): string {\n    return this.colorArray[this.counterModel.count % this.colorArray.length];\n  }\n}",
  "counter-model@counter-model.ts": "@kosModel(MODEL_TYPE)\nexport class CounterModelImpl implements IKosDataModel, IKosIdentifiable {\n  id: string;\n  count = 0;\n  interval: NodeJS.Timeout | null = null;\n\n  constructor(modelId: string) {\n    this.id = modelId;\n  }\n\n  increment(): void {\n    this.count += 1;\n  }\n\n  stopCounter(): void {\n    if (this.interval) {\n      clearInterval(this.interval);\n      this.interval = null;\n    }\n  }\n\n  startCounter(): void {\n    this.interval = setInterval(() => {\n      this.increment();\n    }, 1000);\n  }\n\n  toggleCounter = (): void =>\n    this.interval ? this.stopCounter() : this.startCounter();\n\n  get isCounting() {\n    return !!this.interval;\n  }\n\n  // -------------------LIFECYCLE----------------------------\n\n  async load(): Promise<void> {\n    this.startCounter();\n  }\n\n  async destroy(): Promise<void> {\n    if (this.interval) {\n      clearInterval(this.interval);\n      this.interval = null;\n    }\n  }\n}",
  "counter-model-simple@counter-model.ts": "@kosModel(MODEL_TYPE)\nexport class CounterModelSimple implements IKosDataModel, IKosIdentifiable {\n  id: string;\n  count = 0;\n  interval: NodeJS.Timeout | null = null;\n\n  constructor(modelId: string) {\n    this.id = modelId;\n  }\n\n  increment(): void {\n    this.count += 1;\n  }\n\n  async load(): Promise<void> {\n    this.interval = setInterval(() => {\n      this.increment();\n    }, 1000);\n  }\n\n  async destroy(): Promise<void> {\n    if (this.interval) {\n      clearInterval(this.interval);\n      this.interval = null;\n    }\n  }\n}",
  "countdown@countdown-model.ts": "@kosModel(MODEL_TYPE)\nexport class CountdownModelImpl implements IKosDataModel, IKosIdentifiable {\n  id: string;\n  private logger: KosContextLogger;\n  private counter: CounterModel;\n  constructor(\n    modelId: string,\n    options: CountdownOptions,\n    context: KosCreationContext,\n  ) {\n    this.id = modelId;\n    this.logger = context.logger;\n    this.counter = options.companionParent;\n\n    console.log(\"initializing\");\n    if (options) {\n      // Assign options properties here.\n    }\n  }\n\n  get timeRemaining() {\n    return Math.max(30 - this.counter.count, 0);\n  }\n\n  reset = () => {\n    this.counter.stopCounter();\n    this.counter.count = 0;\n    this.counter.startCounter();\n  };\n\n  // -------------------LIFECYCLE----------------------------\n\n  async init(): Promise<void> {\n    this.logger.debug(`initializing countdown ${this.id}`);\n  }\n\n  async load(): Promise<void> {\n    this.logger.debug(`loading countdown ${this.id}`);\n  }\n}",
  "property@team-container-model.ts": "@kosChild private _models: IKosModelContainer<TeamModel>;",
  "method@team-container-model.ts": "createTeam(name: string) {\n  const model = Team.factory(`${this._models.data.length + 1}`)({\n    name,\n  });\n\n  this.addModel(model);\n}",
  "publish-event@team-container-model.ts": "removeModel = (id: string) => {\n  this._models.removeModel(id);\n  EventBus.publish(\"/team/remove\", { id });\n};",
  "TeamModel@team-model.ts": "@kosModel(MODEL_TYPE)\nexport class TeamModelImpl implements IKosDataModel, IKosIdentifiable {\n  id: string;\n  name!: string;\n\n  constructor(modelId: string, options: TeamOptions) {\n    this.id = modelId;\n\n    if (options) {\n      this.name = options.name;\n      // Assign options properties here.\n    }\n  }\n\n  remove() {\n    this.remove();\n  }\n}",
  "DeviceModel@device-model.ts": "@kosModel(MODEL_TYPE)\nexport class DeviceModelImpl implements IKosDataModel, IKosIdentifiable {\n  id: string;\n\n  // extract-code device-model-string\n  @kosConfigProperty({\n    path: \"kos:device\",\n    attribute: \"name\",\n  })\n  deviceName!: KosConfigProperty<string>;\n\n  // extract-code device-model-enum\n  @kosConfigProperty({\n    path: \"system:service:codexBasic\",\n    attribute: \"colors\",\n  })\n  colors!: KosConfigProperty<OcclusionPolicyOptions>;\n\n  // extract-code device-model-boolean\n  @kosConfigProperty({\n    path: \"kos:service:pumpError\",\n    attribute: \"blockSoldOutWater\",\n  })\n  blockSoldOutWater!: KosConfigProperty<boolean>;\n\n  constructor(modelId: string) {\n    this.id = modelId;\n  }\n}",
  "device-model-string@device-model.ts": "@kosConfigProperty({\n  path: \"kos:device\",\n  attribute: \"name\",\n})\ndeviceName!: KosConfigProperty<string>;",
  "device-model-enum@device-model.ts": "@kosConfigProperty({\n  path: \"system:service:codexBasic\",\n  attribute: \"colors\",\n})\ncolors!: KosConfigProperty<OcclusionPolicyOptions>;",
  "device-model-boolean@device-model.ts": "@kosConfigProperty({\n  path: \"kos:service:pumpError\",\n  attribute: \"blockSoldOutWater\",\n})\nblockSoldOutWater!: KosConfigProperty<boolean>;",
  "update@service-example-container-model.ts": "updateServiceExample(data: ServiceExampleOptions[]) {\n  data.forEach((trouble) => {\n    this.addModel(\n      ServiceExample.instance(`TROUBLE_ID_${trouble.id}`)\n        .options({ ...trouble })\n        .build(),\n    );\n  });\n}",
  "initialize@service-example-container-model.ts": "async init(): Promise<void> {\n  this.logger.debug(\n    `initializing service-example-container container ${this.id}`,\n  );\n  const [err, data] = await getServiceExampleContainer();\n  if (err) {\n    this.logger.error(\"Unable to access service-example endpoint\");\n    return;\n  } else if (data) {\n    this.updateServiceExample(data);\n  }\n}",
  "future-model@futures-model.ts": "@kosModel(MODEL_TYPE)\nexport class FuturesModelImpl\n  implements IKosDataModel, IKosIdentifiable, FutureContainer\n{\n  id: string;\n\n  // extract-code future-prop\n  futureHandler: FutureAwareContainer;\n\n  // extract-code future-constructor\n  constructor(modelId: string) {\n    this.id = modelId;\n    this.futureHandler = new FutureHandler(this);\n  }\n\n  // extract-code future-decorator\n  @kosFuture()\n  async start(trackerId?: string) {\n    const [err, data] = await startFuture(trackerId || \"\");\n    if (err) {\n      return;\n    } else if (data) {\n      return data;\n    }\n    return null;\n  }\n\n  // extract-code future-getter\n  get future() {\n    return this.futureHandler.future;\n  }\n\n  // extract-code future-progress\n  get progress(): number | undefined {\n    return this.future?.progress;\n  }\n\n  // extract-code future-timeleft\n  get timeLeft(): number | undefined {\n    if (!this.future?.remainingTimeMs) {\n      return 0;\n    }\n    return this.future?.remainingTimeMs / 1000;\n  }\n\n  // extract-code future-complete\n  get isComplete(): boolean {\n    return this.future?.endState === \"SUCCESS\";\n  }\n\n  // extract-code future-progress\n  get isInProgress(): boolean {\n    return !!this.future && !this.future.endState;\n  }\n}",
  "future-prop@futures-model.ts": "futureHandler: FutureAwareContainer;",
  "future-constructor@futures-model.ts": "constructor(modelId: string) {\n  this.id = modelId;\n  this.futureHandler = new FutureHandler(this);\n}",
  "future-decorator@futures-model.ts": "@kosFuture()\nasync start(trackerId?: string) {\n  const [err, data] = await startFuture(trackerId || \"\");\n  if (err) {\n    return;\n  } else if (data) {\n    return data;\n  }\n  return null;\n}",
  "future-getter@futures-model.ts": "get future() {\n  return this.futureHandler.future;\n}",
  "future-progress@futures-model.ts": "get isInProgress(): boolean {\n  return !!this.future && !this.future.endState;\n}",
  "future-timeleft@futures-model.ts": "get timeLeft(): number | undefined {\n  if (!this.future?.remainingTimeMs) {\n    return 0;\n  }\n  return this.future?.remainingTimeMs / 1000;\n}",
  "future-complete@futures-model.ts": "get isComplete(): boolean {\n  return this.future?.endState === \"SUCCESS\";\n}",
  "session-model-timer@session-model.ts": "@kosTopicHandler({\n  topic: TIMER_EVENT,\n  websocket: false,\n})\nhandleTimer(message: { name: string; action: string }) {\n  if (message.action === TIMER_END) {\n    this.timerStatus = \"finished\";\n  }\n}",
  "create-timer@session-model.ts": "createTimer() {\n  this.timer = TimerManager.createTimer(\"sessionTimer\", 3) as KosTimer;\n}",
  "create-timer-with-warning@session-model.ts": "createTimerWithWarning = () => {\n  this.message = \"Timer started\";\n  this.timer = TimerManager.createTimer(\"sessionData\", 10, [\n    {\n      name: \"Warning\",\n      action: (name, timeRemaining) => {\n        this.message = `${timeRemaining} seconds left`;\n      },\n      remainingTime: 5,\n    },\n    {\n      name: \"End\",\n      action: (name, timeRemaining) => {\n        this.message = `Timer finished`;\n        this.timerStatus = \"finished\";\n      },\n      remainingTime: 0,\n    },\n  ])!;\n  this.timer.start();\n};",
  "ServiceExampleConstructor@service-example-model.ts": "constructor(\n  modelId: string,\n  options: ServiceExampleOptions,\n  context: KosCreationContext,\n) {\n  this.id = modelId;\n  this.logger = context.logger;\n  if (options) {\n    this.description = options.desc;\n  }\n}",
  "unit-example-config@unit-example-model.ts": "@kosConfigProperty({\n  path: \"system:service:codexBasic\",\n  attribute: \"volume\",\n})\nvolume!: KosConfigProperty<number>;",
  "unit-override-example@unit-example-model.ts": "@kosConfigProperty({\n  path: \"system:service:codexBasic\",\n  attribute: \"volume\",\n  converter: {\n    to: \"fluid-ounce\",\n  },\n})\nvolumeAsOunce!: KosConfigProperty<number>;",
  "UserModel@user-model.ts": "@kosModel(MODEL_TYPE)\nexport class UserModelImpl implements IKosDataModel, IKosIdentifiable {\n  id: string;\n  name!: string;\n  role!: string;\n\n  teamId!: string;\n\n  constructor(modelId: string, options: UserOptions) {\n    this.id = modelId;\n\n    this.name = options.name;\n    this.role = options.role;\n    this.teamId = options.teamId;\n  }\n\n  updateModel(options: UserOptions): void {\n    // Update model properties here.\n  }\n\n  // -------------------LIFECYCLE----------------------------\n\n  async init(): Promise<void> {\n    console.log(`initializing user ${this.id}`);\n  }\n\n  async load(): Promise<void> {\n    console.log(`loading user ${this.id}`);\n  }\n}",
  "model-index@user-container-model.ts": "this._models = new KosModelContainer<UserModel>({\n  parentId: modelId,\n  indexMap: {\n    [INDEX_BY_TEAM_ID]: \"teamId\",\n    [INDEX_BY_ROLE_TYPE]: (model) =>\n      [\"admin\", \"superadmin\"].includes(model.role) ? \"admin\" : \"non-admin\",\n  },\n});",
  "model-index-get@user-container-model.ts": "getUsersByTeamId(id: string) {\n  return this.models.getIndexByKey(\"byTeamId\", id);\n}",
  "topic-handler@user-container-model.ts": "@kosTopicHandler({\n  topic: \"/team/remove\",\n  websocket: false,\n})\nhandleTeamRemove(teamId: string) {\n  this.models.getIndexByKey(\"byTeamId\", teamId).forEach((model) => {\n    this.removeModel(model.id);\n  });\n}",
  "prop-key@widget-container-model.ts": "const WIDGET_PROP_KEY = createPropKey<WidgetModel>(\"id\");",
  "prop-key-handler@widget-container-model.ts": "@kosTopicHandler({\n  topic: `/kos/widgets/${WIDGET_PROP_KEY}/update`,\n  websocket: true,\n})\nhandleWidgetUpdate(message: WidgetOptions) {\n  this.updateModel(message);\n}",
  "widget-container-handler@widget-container-model.ts": "@kosTopicHandler({\n  topic: \"/app/system/codex/objects/added\",\n  websocket: true,\n})\nhandleWidgetAdd(message: WidgetResponse) {\n  this.addModel(Widget.instance(`${message.id}`).options(message).build());\n}",
  "widget-container-wildcard@widget-container-model.ts": "@kosTopicHandler({\n  topic: \"/app/system/codex/objects/*\",\n  websocket: true,\n})\nhandleWidgetWildcard(\n  message: WidgetResponse,\n  payload: { [key: string]: any },\n) {\n  console.log(\"wildcard\", message, payload);\n}",
  "widget-container-condition@widget-container-model.ts": "@kosTopicHandler({\n  topic: \"/app/system/codex/objects/modified\",\n  websocket: true,\n  condition: (message: WidgetResponse) => message.desc !== undefined,\n})\nhandleWidgetCondition(message: WidgetResponse) {\n  console.log(\"condition\", message);\n}",
  "kosModelEffect@widget-model.ts": "@kosModelEffect({\n  dependencies: (model) => [model.description],\n})\nprotected handleInsertion() {\n  if (this.description) {\n    // Handle insertion logic here.\n  }\n}",
  "OcclusionPolicyOptions@index.d.ts": "export type OcclusionPolicyOptions = \"DEFAULT\" | \"RED\" | \"BLUE\" | \"GREEN\";"
}